{"version":3,"sources":["components/games/index.tsx","components/games/implementations/tictactoe/common/index.ts","components/games/implementations/tictactoe/components/cell.tsx","components/games/implementations/tictactoe/components/field.tsx","components/games/implementations/tictactoe/components/result.tsx","components/games/implementations/tictactoe/components/gameHistory.tsx","components/games/implementations/tictactoe/index.tsx","components/routes/index.tsx","components/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["Games","url","title","map","link","to","CELL_TYPES","GAME_STATES","WINING_PATTERNS","regExp","winType","Cell","index","type","click","onClick","className","Field","field","turnClick","cell","i","key","GameResult","gameState","refresh","stepType","MESSAGES","GameHistory","winHistory","length","el","TicTacToe","emptyField","Array","fill","useState","setWinHistory","setField","setGameState","setStepType","useEffect","fieldString","reduce","p","fieldFull","indexOf","gameWon","find","pattern","RegExp","test","prevState","Routes","exact","path","component","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7cbcf98.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst Games = () => {\n    const links = [\n        {\n            url: '/tic-tac-toe',\n            title: 'Tic Tac Toe'\n        }\n    ];\n    return (\n        <>\n            <h2>Games available:</h2>\n\n            {links.map(link => (<Link to={link.url}>{link.title}</Link>))}\n        </>\n    );\n};\n\nexport default Games;\n","const CELL_TYPES = {\n    EMPTY: ' ',\n    CROSS: 'x',\n    CIRCLE: 'o',\n};\n\nconst GAME_STATES = {\n    PLAYING: 'PLAYING',\n    FIELD_FULL: 'FIELD_FULL',\n    CIRCLES_WON: 'CIRCLES_WON',\n    CROSS_WON: 'CROSS_WON',\n};\n\ninterface IWinPattern {\n    regExp: string,\n    winType: string\n}\n\nconst WINING_PATTERNS: Array<IWinPattern> = [\n    {regExp: 'xxx......', winType: GAME_STATES.CROSS_WON},\n    {regExp: '...xxx...', winType: GAME_STATES.CROSS_WON},\n    {regExp: '......xxx', winType: GAME_STATES.CROSS_WON},\n    {regExp: 'x..x..x..', winType: GAME_STATES.CROSS_WON},\n    {regExp: '.x..x..x.', winType: GAME_STATES.CROSS_WON},\n    {regExp: '..x..x..x', winType: GAME_STATES.CROSS_WON},\n    {regExp: 'x...x...x', winType: GAME_STATES.CROSS_WON},\n    {regExp: '..x.x.x..', winType: GAME_STATES.CROSS_WON},\n    {regExp: 'ooo......', winType: GAME_STATES.CIRCLES_WON},\n    {regExp: '...ooo...', winType: GAME_STATES.CIRCLES_WON},\n    {regExp: '......ooo', winType: GAME_STATES.CIRCLES_WON},\n    {regExp: 'o..o..o..', winType: GAME_STATES.CIRCLES_WON},\n    {regExp: '.o..o..o.', winType: GAME_STATES.CIRCLES_WON},\n    {regExp: '..o..o..o', winType: GAME_STATES.CIRCLES_WON},\n    {regExp: 'o...o...o', winType: GAME_STATES.CIRCLES_WON},\n    {regExp: '..o.o.o..', winType: GAME_STATES.CIRCLES_WON},\n];\n\nexport {CELL_TYPES, GAME_STATES, WINING_PATTERNS};\n","import React, { useMemo } from 'react';\n\ninterface Props {\n    index: number,\n    type: string,\n    click: ((index: number) => void),\n}\n\nconst Cell =({index, type, click }: Props) => {\n    return (\n        <>\n            <button\n                onClick={() => click(index)}\n                className={'cell'}\n            >\n                {type}\n            </button>\n        </>\n    );\n};\n\nexport default Cell;\n","import React from 'react';\nimport MemoizedCell from './cell';\n\ninterface Props {\n    field: any[],\n    turnClick: (index: number) => void\n}\n\nconst Field = ({field, turnClick}: Props) => {\n    return (\n        <div className={'field'}>\n            {field.map((cell: any, i) => {\n                return <MemoizedCell\n                    key={i}\n                    index={i}\n                    click={(index) => turnClick(index)}\n                    type={cell.type}\n                />\n            })}\n        </div>\n    );\n};\n\nexport default Field;\n","import React from 'react';\n\nimport { GAME_STATES } from '../common';\n\ninterface Props {\n    gameState: string,\n    refresh: () => void,\n    stepType: string\n}\n\nconst GameResult = ({gameState, refresh, stepType}: Props) => {\n    const MESSAGES = {\n        [GAME_STATES.PLAYING]: `${stepType === 'x' ? 'CROSSES' : 'CIRCLES'} turn now`,\n        [GAME_STATES.CIRCLES_WON]: 'Circles won this game, crosses suck.',\n        [GAME_STATES.CROSS_WON]: 'Crosses won, deal with it.',\n        [GAME_STATES.FIELD_FULL]: 'Oh come on, can\\'t any of you win?'\n    };\n    return (\n        <>\n            <p>{MESSAGES[gameState]}</p>\n            <button onClick={() => refresh()}>Play again</button>\n        </>\n    );\n};\n\nexport default GameResult;\n","import React from 'react';\n\ninterface Props {\n    winHistory: string[]\n}\n\nconst GameHistory = ({winHistory} : Props) => {\n    return (\n        <>\n            {\n                winHistory.length > 0\n                    ?\n                        <div>\n                            <h3>Win History:</h3>\n                            {winHistory.map((el, i) => (<p key={i}>{el}</p>))}\n                        </div>\n                    :\n                        <h3>No one won yet!</h3>\n            }\n        </>\n    );\n};\n\nexport default GameHistory;\n","import React, { useEffect, useState } from 'react';\n\nimport './styles/index.css';\n\nimport { CELL_TYPES, GAME_STATES, WINING_PATTERNS } from './common';\nimport Field from './components/field';\nimport GameResult from './components/result';\nimport GameHistory from './components/gameHistory';\n\nconst TicTacToe = () => {\n    const emptyField = new Array(9).fill({type: CELL_TYPES.EMPTY});\n    const [winHistory, setWinHistory] = useState<string[] | []>([]);\n    const [field, setField] = useState(emptyField);\n    const [gameState, setGameState] = useState(GAME_STATES.PLAYING);\n    const [stepType, setStepType] = useState(CELL_TYPES.CROSS);\n\n    // TODO: use memoization\n    useEffect(() => {\n        const fieldString = field.reduce((p, el) => p + el.type, '');\n        const fieldFull = fieldString.indexOf(CELL_TYPES.EMPTY) < 0;\n\n        const gameWon = WINING_PATTERNS.find(pattern => {\n            const regExp = new RegExp(pattern.regExp);\n            if(regExp.test(fieldString)) return pattern;\n        });\n\n        if (gameWon) {\n            setWinHistory((prevState) => [...prevState, gameWon.winType]);\n            setGameState(gameWon.winType);\n        }\n        if (fieldFull && !gameWon) {\n            setWinHistory((prevState) => [...prevState, 'Even']);\n            setGameState(GAME_STATES.FIELD_FULL);\n        }\n\n        return /* componentWillUnmount */;\n\n    }, [field]);\n\n    const turnClick = (index: number): void => {\n        if (gameState !== GAME_STATES.PLAYING) return;\n\n        setField([...field.map((el, i) => {\n            if (i === index && el.type === CELL_TYPES.EMPTY) {\n                setStepType(stepType === CELL_TYPES.CROSS ? CELL_TYPES.CIRCLE : CELL_TYPES.CROSS);\n                return {type: stepType}\n            }\n            return el;\n        })]);\n    };\n\n    const refreshGame = () => {\n        setField(emptyField);\n        setGameState(GAME_STATES.PLAYING)\n    };\n\n    return (\n        <div className=\"game-container\">\n            <div>\n                <GameResult stepType={stepType} gameState={gameState} refresh={refreshGame}/>\n                <Field field={field} turnClick={turnClick}/>\n            </div>\n            <GameHistory winHistory={winHistory} />\n        </div>\n    );\n};\n\nexport default TicTacToe;\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport Games from '../games';\nimport TicTacToe from '../games/implementations/tictactoe';\n\nconst Routes = () => {\n    return (\n        <>\n            <Switch>\n                <Route exact path={'/'} component={Games}/>\n                <Route exact path={'/games'} component={Games}/>\n                <Route exact path={'/tic-tac-toe'} component={TicTacToe}/>\n            </Switch>\n        </>\n    );\n};\n\nexport default Routes;\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nimport './app.css';\n\nimport Routes from '../routes';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <>\n                <HashRouter>\n                    <Routes/>\n                </HashRouter>\n            </>\n        );\n    }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}