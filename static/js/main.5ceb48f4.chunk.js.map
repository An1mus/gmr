{"version":3,"sources":["components/games/index.tsx","components/games/implementations/tictactoe/cell.tsx","components/games/implementations/tictactoe/index.tsx","components/routes/index.tsx","common/index.tsx","common/history.tsx","components/app/index.tsx","serviceWorker.ts","index.tsx"],"names":["Games","url","title","map","link","to","Cell","index","type","click","onClick","className","TYPES","TicTacToe","emptyCell","winPatterns","useState","Array","fill","field","setField","isFinished","setFinished","stepType","setStepType","useEffect","reducedState","reduce","p","el","find","RegExp","test","cell","i","key","turnClick","Routes","exact","path","component","history","createBrowserHistory","App","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAoBeA,EAhBD,WAOV,OACI,oCACI,gDARM,CACV,CACIC,IAAK,eACLC,MAAO,gBAOAC,KAAI,SAAAC,GAAI,OAAK,kBAAC,IAAD,CAAMC,GAAID,EAAKH,KAAMG,EAAKF,Y,eCM3CI,G,MAbF,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MACxB,OACI,oCACI,4BACIC,QAAS,kBAAMD,EAAMF,IACrBI,UAAW,QAEVH,MCTXI,EACK,IADLA,EAEK,IAFLA,EAGM,IAsDGC,EAnDG,WACd,IAAMC,EAAY,CAACN,KAAMI,GACnBG,EAAwB,CAC1B,YAAa,YAAa,aAC1B,YAAa,YAAa,YAC1B,YAAa,YAAa,YAC1B,YAAa,aAAc,YAC3B,YAAa,YAAa,YAC1B,aARgB,EAWIC,mBAAS,IAAIC,MAAM,GAAGC,KAAKJ,IAX/B,mBAWfK,EAXe,KAWRC,EAXQ,OAYYJ,oBAAS,GAZrB,mBAYfK,EAZe,KAYHC,EAZG,OAaUN,mBAASJ,GAbnB,mBAafW,EAbe,KAaLC,EAbK,KAkCpB,OARAC,qBAAU,WACN,IAAMC,EAAeP,EAAMQ,QAAO,SAACC,EAAGC,GAAJ,OAAWD,EAAIC,EAAGrB,OAAM,IAE1Dc,IAAcP,EAAYe,MAAK,SAAAD,GAC3B,OAAQ,IAAIE,OAAOF,GAAKG,KAAKN,SAElC,CAACP,IAGA,oCACKE,GAAc,6BACf,yBAAKV,UAAW,SACXQ,EAAMhB,KAAI,SAAC8B,EAAMC,GACd,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACL3B,MAAO2B,EACPzB,MAAO,SAACF,GAAD,OA3BT,SAACA,GACfa,EAAS,YAAID,EAAMhB,KAAI,SAAC0B,EAAIK,GACxB,OAAIA,IAAM3B,GAASsB,EAAGrB,OAASI,EACpB,CAACJ,KAAMe,GAEXM,OAGXL,EAAYD,IAAaX,EAAcA,EAAeA,GAmBpBwB,CAAU7B,IAC5BC,KAAMyB,EAAKzB,aCrCpB6B,EAZA,WACX,OACI,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWxC,IACnC,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAM,SAAUC,UAAWxC,IACxC,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAM,eAAgBC,UAAW3B,O,OCV/C4B,ECACC,cCoBDC,E,iLAXP,OACI,oCACI,8CACA,kBAAC,IAAD,CAAQF,QAASA,GACb,kBAAC,EAAD,Y,GANFG,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5ceb48f4.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst Games = () => {\n    const links = [\n        {\n            url: '/tic-tac-toe',\n            title: 'Tic Tac Toe'\n        }\n    ];\n    return (\n        <>\n            <h2>Games available:</h2>\n\n            {links.map(link => (<Link to={link.url}>{link.title}</Link>))}\n        </>\n    );\n};\n\nexport default Games;\n","import React from 'react';\n\ninterface Props {\n    index: number,\n    type: string,\n    click: ((index: number) => void),\n}\n\nconst Cell = ({index, type, click }: Props) => {\n    return (\n        <>\n            <button\n                onClick={() => click(index)}\n                className={'cell'}\n            >\n                {type}\n            </button>\n        </>\n    );\n};\n\nexport default Cell;\n","import React, { useEffect, useState } from 'react';\n\nimport './index.css';\n\nimport Cell from './cell';\n\nconst TYPES = {\n    EMPTY: ' ',\n    CROSS: 'x',\n    CIRCLE: 'o',\n};\n\nconst TicTacToe = () => {\n    const emptyCell = {type: TYPES.EMPTY};\n    const winPatterns: string[] = [\n        'xxx......', '...xxx...', '.......xxx',\n        'x..x..x..', '.x..x..x.', '..x..x..x',\n        'x...x...x', '..x..x..x', 'ooo......',\n        '...ooo...', '.......ooo', 'o..o..o..',\n        '.o..o..o.', '..o..o..o', 'o...o...o',\n        '..o..o..o'\n    ];\n\n    let [field, setField] = useState(new Array(9).fill(emptyCell));\n    let [isFinished, setFinished] = useState(false);\n    let [stepType, setStepType] = useState(TYPES.CROSS);\n\n    const turnClick = (index: number): void => {\n        setField([...field.map((el, i) => {\n            if (i === index && el.type === TYPES.EMPTY) {\n                return {type: stepType}\n            }\n            return el;\n        })]);\n\n        setStepType(stepType === TYPES.CROSS ? TYPES.CIRCLE : TYPES.CROSS);\n    };\n\n    useEffect(() => {\n        const reducedState = field.reduce((p, el) => p + el.type, '');\n\n        setFinished(!!winPatterns.find(el => {\n            return (new RegExp(el)).test(reducedState);\n        }));\n    }, [field]);\n\n    return (\n        <>\n            {isFinished && 'Game finished, someone won'}\n            <div className={'field'}>\n                {field.map((cell, i) => {\n                    return <Cell\n                        key={i}\n                        index={i}\n                        click={(index) => turnClick(index)}\n                        type={cell.type}\n                    />\n                })}\n            </div>\n        </>\n    );\n};\n\nexport default TicTacToe;\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport Games from '../games';\nimport TicTacToe from '../games/implementations/tictactoe';\n\nconst Routes = () => {\n    return (\n        <>\n            <Switch>\n                <Route exact path={'/'} component={Games}/>\n                <Route exact path={'/games'} component={Games}/>\n                <Route exact path={'/tic-tac-toe'} component={TicTacToe}/>\n            </Switch>\n        </>\n    );\n};\n\nexport default Routes;\n","import history from './history';\n\nexport default history;\n","import {createBrowserHistory} from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import React from 'react';\nimport { Router } from 'react-router';\n\nimport './app.css';\n\nimport Routes from '../routes';\n\nimport history from '../../common/';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <>\n                <h1>App is running</h1>\n                <Router history={history}>\n                    <Routes/>\n                </Router>\n            </>\n        );\n    }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}